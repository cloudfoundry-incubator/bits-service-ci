sl-bosh-params: &sl-bosh-params
  BOSH_TARGET: {{sl-bosh-target}}
  BOSH_USERNAME: {{sl-bosh-username}}
  BOSH_PASSWORD: {{sl-bosh-password}}
  ENVIRONMENT_NAME: softlayer
  DIRECTOR_IP: {{sl-bosh-director-ip}}
  DIRECTOR_NAME: {{sl-bosh-director-name}}

bosh2-params: &bosh2-params
  BOSH_TARGET: {{bosh2-target}}
  BOSH_USERNAME: {{bosh2-username}}
  BOSH_PASSWORD: {{bosh2-password}}

aws-bosh-params: &aws-bosh-params
  BOSH_TARGET: {{aws-bosh-target}}
  BOSH_USERNAME: {{aws-bosh-username}}
  BOSH_PASSWORD: {{aws-bosh-password}}

# TODO these params coud be deduced from bits-service-private-config
blobstore-local-bosh-params: &blobstore-local-bosh-params
  BOSH_TARGET: {{blobstore-local-bosh-target}}
  BOSH_USERNAME: {{blobstore-local-bosh-username}}
  BOSH_PASSWORD: {{blobstore-local-bosh-password}}

notify: &notify
  put: slack
  params:
    text: |
      $TEXT_FILE_CONTENT The Concourse pipeline broke. See:
      $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    text_file: points-of-contact/slack-users-single-line

jobs:
# BITS-SERVICE
- name: run-bitsgo-unit-tests
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bitsgo-unit-tests.yml
  on_failure: *notify
- name: run-bitsgo-contract-integration-test-openstack
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: openstack
      INTEGRATION_TEST_SETUP: ((openstack_integration_test_config))
  on_failure: *notify


- name: run-bitsgo-contract-integration-test-cos
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: S3
      INTEGRATION_TEST_SETUP: ((cos_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-s3
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: S3
      INTEGRATION_TEST_SETUP: ((s3_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-azure
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: AZURE
      INTEGRATION_TEST_SETUP: ((azure_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-google-gcp
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: GCP
      INTEGRATION_TEST_SETUP: ((google_gcp_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-google-s3
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: S3
      INTEGRATION_TEST_SETUP: ((google_s3_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-alibaba
  serial: true
  plan:
  - aggregate:
    - { get: bitsgo, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: alibaba
      INTEGRATION_TEST_SETUP: ((alibaba_integration_test_config))
  on_failure: *notify

- name: bump-bits-service-release-bitsgo
  serial: true
  plan:
  - aggregate:
    - get: bitsgo
      passed:
        - run-bitsgo-unit-tests
        - run-bitsgo-contract-integration-test-openstack
        - run-bitsgo-contract-integration-test-cos
        - run-bitsgo-contract-integration-test-s3
        - run-bitsgo-contract-integration-test-azure
        - run-bitsgo-contract-integration-test-google-gcp
        - run-bitsgo-contract-integration-test-google-s3
        - run-bitsgo-contract-integration-test-alibaba
      trigger: true
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: bits-service-release-bitsgo, params: { clean_tags: true } }
  - task: Bump bits-service-release-bitsgo
    file: ci-tasks/tasks/bump-release.yml
    input_mapping:
      git-repo: bits-service-release-bitsgo
      git-sub-repo: bitsgo
    params:
      SUB_MODULE_PATH: src/github.com/petergtz/bitsgo
  - put: bits-service-release-bitsgo
    params:
      repository: bumped/git-repo
      rebase: true
  on_failure: *notify

- name: run-bits-service-client-tests
  serial: true
  plan:
  - { get: bits-service-client, trigger: true }
  - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    file: ci-tasks/tasks/run-bits-service-client-tests.yml
    attempts: 3
  on_failure: *notify

- name: Publish gem
  serial: true
  plan:
  - { get: bits-service-client, passed: [run-bits-service-client-tests], trigger: true }
  - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Publish to rubygems.org
    file: ci-tasks/tasks/publish-gem.yml
    params:
      GIT_PRIVATE_KEY: {{github-private-key}}
      RUBYGEMS_API_KEY: {{rubygems-api-key}}
  on_failure: *notify

- name: create-and-upload-bitsgo-release
  serial: true
  plan:
  - aggregate:
    - { get: bits-service-release-bitsgo-version, params: { pre: dev } }
    - { get: bits-service-release-bitsgo, trigger: true, params: { clean_tags: true } }
    - { get: ci-tasks, resource: bits-service-ci }
  - put: bits-service-release-bitsgo-version
    params: { file: bits-service-release-bitsgo-version/version }
  - task: Create release
    file: ci-tasks/tasks/create-bits-release.yml
    params:
      VERSION_FILE: bits-service-release-version/version
    input_mapping:
      bits-service-release: bits-service-release-bitsgo
      bits-service-release-version: bits-service-release-bitsgo-version
  - put: bits-service-release-bitsgo-tarball
    params: { file: releases/*.tgz }
  - put: bits-service-release-bitsgo
    params:
      repository: bits-service-release-bitsgo
      tag: bits-service-release-bitsgo-version/version
      only_tag: true
  on_failure: *notify

- name: deploy-with-S3
  serial: true
  serial_groups: [bits-deployment-s3]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))] }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: stemcell, resource: softlayer-stemcell, trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-s3-sl-deployment-events, trigger: true }
  - task: Create deployment manifest
    file: ci-tasks/tasks/create-bits-manifest.yml
    input_mapping:
      bits-service-deployment-manifest-generation-tools: (( grab switch.bits-service-release ))
      bits-service-private-config: git-deployment-vars
    params:
      <<: *sl-bosh-params
      BITS_DIRECTORY_KEY: {{s3-blobstore-bucket-name}}
      BITS_AWS_REGION: {{s3-blobstore-region}}
      AWS_ACCESS_KEY_ID: {{s3-blobstore-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{s3-blobstore-secret-access-key}}
      BLOBSTORE_TYPE: s3
      BITS_SERVICE_JOB_IP: &bits_service_job_ip_s3 10.175.96.246
      BLOBSTORE_JOB_IP: 10.175.96.247
      DEPLOYMENT_NAME: bits-service-s3
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/bits-service-private-config
    - put: bosh-deployment-bits-service-s3
      attempts: 3
      params: &sl-bits-service-deployment-params
        manifest: manifests/manifest.yml
        stemcells: ["stemcell/stemcell.tgz"]
        releases:
          - "capi-release-tarball/*.tgz"
          - (( concat switch.bits-service-release-tarball "/*.tgz" ))
        no_redact: true
  on_failure: *notify

- name: run-system-tests-S3
  serial: true
  serial_groups: [bits-deployment-s3]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [deploy-with-S3], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [deploy-with-S3], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [deploy-with-S3] }
    - { get: (( grab switch.bits-service-release )), passed: [deploy-with-S3] }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: git-deployment-vars }
    - { get: bits-service-s3-sl-deployment-events, passed: [deploy-with-S3], trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-release-tests.yml
    input_mapping:
      bits-service-system-test-source: (( grab switch.bits-service-release ))
      deployment-vars: git-deployment-vars
    params:
      <<: *sl-bosh-params
      BITS_SERVICE_PRIVATE_ENDPOINT_IP: *bits_service_job_ip_s3
      DEPLOYMENT_NAME: bits-service-s3
  on_failure: *notify

- name: deploy-with-LOCAL
  serial: true
  serial_groups: [bits-deployment-local]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))] }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true}
    - { get: stemcell, resource: softlayer-stemcell, trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-local-sl-deployment-events, trigger: true }
  - task: Create deployment manifest
    file: ci-tasks/tasks/create-bits-manifest.yml
    input_mapping:
      bits-service-deployment-manifest-generation-tools: (( grab switch.bits-service-release ))
      bits-service-private-config: git-deployment-vars
    params:
      <<: *sl-bosh-params
      BLOBSTORE_TYPE: local
      BITS_SERVICE_JOB_IP: &bits_service_job_ip_local 10.175.96.242
      BLOBSTORE_JOB_IP: 10.175.96.243
      DEPLOYMENT_NAME: bits-service-local
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/bits-service-private-config
    - put: bosh-deployment-bits-service-local
      attempts: 3
      params: *sl-bits-service-deployment-params
  on_failure: *notify

- name: run-system-tests-LOCAL
  serial: true
  serial_groups: [bits-deployment-local]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [deploy-with-LOCAL], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [deploy-with-LOCAL], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [deploy-with-LOCAL] }
    - { get: (( grab switch.bits-service-release )), passed: [deploy-with-LOCAL]}
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: git-deployment-vars }
    - { get: bits-service-local-sl-deployment-events, passed: [deploy-with-LOCAL], trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-release-tests.yml
    input_mapping:
      bits-service-system-test-source: (( grab switch.bits-service-release ))
      deployment-vars: git-deployment-vars
    params:
      <<: *sl-bosh-params
      BITS_SERVICE_PRIVATE_ENDPOINT_IP: *bits_service_job_ip_local
      DEPLOYMENT_NAME: bits-service-local
  on_failure: *notify

- name: deploy-with-WEBDAV
  serial: true
  serial_groups: [bits-deployment-webdav]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))] }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true}
    - { get: stemcell, resource: softlayer-stemcell, trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-webdav-sl-deployment-events, trigger: true }
  - task: Create deployment manifest
    file: ci-tasks/tasks/create-bits-manifest.yml
    input_mapping:
      bits-service-deployment-manifest-generation-tools: (( grab switch.bits-service-release ))
      bits-service-private-config: git-deployment-vars
    params:
      <<: *sl-bosh-params
      BLOBSTORE_TYPE: webdav
      BITS_SERVICE_JOB_IP: &bits_service_job_ip_webdav 10.175.96.244
      BLOBSTORE_JOB_IP: 10.175.96.245
      DEPLOYMENT_NAME: bits-service-webdav
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/bits-service-private-config
    - put: bosh-deployment-bits-service-webdav
      attempts: 3
      params: *sl-bits-service-deployment-params
  on_failure: *notify

- name: run-system-tests-WEBDAV
  serial: true
  serial_groups: [bits-deployment-webdav]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [deploy-with-WEBDAV], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [deploy-with-WEBDAV], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [deploy-with-WEBDAV] }
    - { get: (( grab switch.bits-service-release )), passed: [deploy-with-WEBDAV] }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: git-deployment-vars }
    - { get: bits-service-webdav-sl-deployment-events, passed: [deploy-with-WEBDAV], trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-release-tests.yml
    input_mapping:
      bits-service-system-test-source: (( grab switch.bits-service-release ))
      deployment-vars: git-deployment-vars
    params:
      <<: *sl-bosh-params
      BITS_SERVICE_PRIVATE_ENDPOINT_IP: *bits_service_job_ip_webdav
      DEPLOYMENT_NAME: bits-service-webdav
  on_failure: *notify

- name: deploy-and-test-with-s3-cf-softlayer
  serial: true
  serial_groups: [cf-softlayer-deployment-s3]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))] }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: stemcell, resource: softlayer-stemcell, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-develop, trigger: true }
    - { get: git-deployment-vars }
    - { get: s3-cf-softlayer-deployment-events, trigger: true }
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    output_mapping:
      manifests: cf-with-bits-service-enabled
    params:
      BOSH_TARGET: {{sl-bosh-target}}
      DEPLOYMENT_NAME: cf
      ENVIRONMENT_NAME: softlayer
      BLOBSTORE_TYPE: s3
      IAAS: softlayer
      CF_DOMAIN: {{sl-cf1-domain}}
      OPERATIONS: >
        -o cf-deployment/operations/scale-to-one-az.yml
        -o ci-tasks/operations/bits-service-scale-to-one-az.yml
      VARIABLES: >
        -v aws_region={{s3-blobstore-region}}
        -v blobstore_access_key_id={{s3-blobstore-access-key-id}}
        -v blobstore_secret_access_key={{s3-blobstore-secret-access-key}}
        -v resource_directory_key={{cf2-s3-blobstore-bucket-name}}
        -v buildpack_directory_key={{cf2-s3-blobstore-bucket-name}}
        -v droplet_directory_key={{cf2-s3-blobstore-bucket-name}}
        -v app_package_directory_key={{cf2-s3-blobstore-bucket-name}}
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - put: softlayer-cf-deployment
      attempts: 2
      params:
        manifest: cf-with-bits-service-enabled/manifest.yml
        stemcells: ["stemcell/stemcell.tgz"]
        releases:
          - 'capi-release-tarball/*.tgz'
          - (( concat switch.bits-service-release-tarball "/*.tgz" ))
        no_redact: true
  - task: Update change-ip
    file: ci-tasks/tasks/update-changeip-dns.yml
    input_mapping:
      deployment-vars: git-deployment-vars
    params:
      <<: *sl-bosh-params
      CHANGE_IP_USER: {{changeip-username}}
      CHANGE_IP_PASSWORD: {{changeip-password}}
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-system-tests.yml
    input_mapping:
      bits-service-system-test-source: (( grab switch.bits-service-release ))
      deployment-vars: git-deployment-vars
    params:
      <<: *sl-bosh-params
      DEPLOYMENT_NAME: cf
      ENVIRONMENT_NAME: softlayer
      CF_DOMAIN: {{sl-cf1-domain}}
  on_failure: *notify

# CAPI-RELEASE
- name: create-capi-release
  serial: true
  plan:
  - aggregate:
    - { get: capi-release, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: bits-service-client, passed: [Publish gem], trigger: true }
  - task: Create capi-release tarball
    file: ci-tasks/tasks/create-capi-release.yml
    input_mapping:
      capi-release: capi-release
    params:
      VERSION_FILE: capi-release-version/number
  - put: capi-release-tarball
    params: { file: releases/*.tgz }
  - put: capi-release-version
    params: { file: capi-release-version/number }
  on_failure: *notify

- name: Publish Dev Release
  plan:
  - aggregate:
    - get: capi-release-tarball
      passed: &acceptance-tests-passed
        - enable-BITS-SERVICE-diego-and-run-CATs
        - migration-backwards-bosh1
        - migration-backwards-bosh2
        - deploy-and-test-cf-blobstore-local
        - run-system-tests-S3
        - run-system-tests-LOCAL
        - run-system-tests-WEBDAV
        - deploy-and-test-with-s3-cf-softlayer
        - run-CATs-in-bitsgo-aws-s3-bosh-lite
        - run-CATs-in-bitsgo-cos-s3-bosh-lite
        # TODO uncomment when we have IBM provided accounts
        # - run-CATs-in-bitsgo-azure-bosh-lite
        # - run-CATs-in-bitsgo-google-s3-bosh-lite
        # - run-CATs-in-bitsgo-google-service-account-bosh-lite
        - run-CATs-in-bitsgo-local-bosh-lite
        - run-CATs-in-bitsgo-openstack-bosh-lite
        - run-CATs-in-bitsgo-webdav-bosh-lite
      trigger: true
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: *acceptance-tests-passed, trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: *acceptance-tests-passed }
  - aggregate:
    - task: Publish release tarball URLs
      file: ci-tasks/tasks/publish-release-tarball-urls.yml
      input_mapping:
        bits-service-release-tarball: (( grab switch.bits-service-release-tarball ))
      params:
        RELEASE_TARBALL_DIRS: capi-release-tarball bits-service-release-tarball
    - put: bits-service-github-release
      params:
        name: (( concat switch.bits-service-release-version "/version" ))
        tag: (( concat switch.bits-service-release-version "/version" ))
        globs:
          - (( concat switch.bits-service-release-tarball "/*.tgz" ))
  on_failure: *notify

- name: Publish Final Release
  plan:
  - aggregate:
    - get: (( grab switch.bits-service-release ))
      passed: *acceptance-tests-passed
    - get: (( grab switch.bits-service-release-version ))
      passed: *acceptance-tests-passed
      params: { bump: minor }
    - get: ci-tasks
      resource: bits-service-ci
    - get: cf-deployment-develop
  - task: Promote Release
    file: ci-tasks/tasks/promote-bits-service-final-release.yml
    input_mapping:
      release-version: (( grab switch.bits-service-release-version ))
      release-git-repo: (( grab switch.bits-service-release ))
    params:
      PRIVATE_YML_CONTENT: {{private-yml}}
  - do:
    - put: (( grab switch.bits-service-release ))
      params:
        repository: release-git-repo-final
        tag: (( concat switch.bits-service-release-version "/version" ))
        rebase: true
    - put: bits-service-github-final-release
      params:
        name: (( concat switch.bits-service-release-version "/version" ))
        tag: (( concat switch.bits-service-release-version "/version" ))
        globs: [ "release-tarball/*.tgz" ]
    - put: (( grab switch.bits-service-release-version ))
      params: { file: (( concat switch.bits-service-release-version "/version" )) }

  - task: Calculate Digest of Final Release
    file: ci-tasks/tasks/calculate-digest.yml
    input_mapping:
      source: release-tarball
    output_mapping:
      digests: release-digest
  # TODO: find a better way to update the ops-file. Commenting this for the time being, because
  #       it messes up our ops file (removes existing YML anchors etc.).
  #       We might not need this anymore when RelInt automatically bumps from their side.
  #
  # - task: Update Opsfile
  #   file: ci-tasks/tasks/update-opsfile.yml
  #   input_mapping:
  #     release-version: (( grab switch.bits-service-release-version ))
  #     cf-deployment: cf-deployment-develop
  #     digests: release-digest
  #   output_mapping:
  #     cf-deployment-updated: cf-deployment-updated
  # - task: Commit Updates
  #   file: ci-tasks/tasks/commit-updates.yml
  #   input_mapping:
  #     release-version: (( grab switch.bits-service-release-version ))
  #     source-repo: cf-deployment-updated
  #   output_mapping:
  #     committed-repo: cf-deployment-committed
  # - put: cf-deployment-develop
  #   params: { repository: cf-deployment-committed }
  on_failure: *notify

- name: manually-delete-cf-diego-aws
  serial: true
  plan:
  - aggregate:
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: cf-diego-aws-deployment-events, params: { bump: major } }
  - task: delete-deployment
    file: ci-tasks/tasks/delete-deployment.yml
    params:
      <<: *aws-bosh-params
      DEPLOYMENT_NAME: cf
  - put: cf-diego-aws-deployment-events
    params: { file: cf-diego-aws-deployment-events/number }
  on_failure: *notify
- name: manually-delete-s3-cf-softlayer
  serial: true
  plan:
  - aggregate:
    - { get: daily-morning-timer, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: s3-cf-softlayer-deployment-events, params: { bump: major } }
  - task: delete-deployment
    file: ci-tasks/tasks/delete-deployment.yml
    params:
      <<: *sl-bosh-params
      DEPLOYMENT_NAME: cf
  - put: s3-cf-softlayer-deployment-events
    params: { file: s3-cf-softlayer-deployment-events/number }
  on_failure: *notify

- name: deploy-and-test-cf-diego-aws
  serial: true
  serial_groups: [cf-aws-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))] }
    - { get: cf-diego-aws-deployment-events, trigger: true}
    - { get: stemcell, resource: aws-stemcell, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-develop, trigger: true }
    - { get: git-deployment-vars }
    - { get: cf-acceptance-tests, trigger: true }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: run-after-midnight, trigger: true }
  - task: Generate CF deployment manifest with bits-service disabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    output_mapping:
      manifests: cf-with-bits-service-disabled
    params: &bosh-interpolate-aws-bits-service-disabled
      BOSH_TARGET: {{aws-bosh-target}}
      DEPLOYMENT_NAME: cf
      ENVIRONMENT_NAME: aws
      BLOBSTORE_TYPE: s3
      IAAS: aws
      CF_DOMAIN: {{aws-cf1-domain}}
      OPERATIONS: >
        -o cf-deployment/operations/scale-to-one-az.yml
        -o cf-deployment/operations/use-external-blobstore.yml
        -o cf-deployment/operations/use-s3-blobstore.yml
        -o ci-tasks/operations/disable-bits-service.yml
        -o ci-tasks/operations/scale-diego-cell-instances.yml
      VARIABLES: >
        -v aws_region={{cf1-s3-blobstore-region}}
        -v blobstore_access_key_id={{cf-migration-s3-blobstore-access-key-id}}
        -v blobstore_secret_access_key={{cf-migration-s3-blobstore-secret-access-key}}
        -v resource_directory_key={{cf1-s3-blobstore-bucket-name}}
        -v buildpack_directory_key={{cf1-s3-blobstore-bucket-name}}
        -v droplet_directory_key={{cf1-s3-blobstore-bucket-name}}
        -v app_package_directory_key={{cf1-s3-blobstore-bucket-name}}
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - put: aws-diego-deployment
      attempts: 2
      params: &params-aws-deployment-bits-service-disabled
        manifest: cf-with-bits-service-disabled/manifest.yml
        stemcells: ["stemcell/stemcell.tgz"]
        releases:
          - "capi-release-tarball/*.tgz"
          - (( concat switch.bits-service-release-tarball "/*.tgz" ))
        no_redact: true
  - attempts: 3
    aggregate:
    - &aws-bits-service-disabled-run-cats
      task: Run CATs
      file: ci-tasks/tasks/run-cats.yml
      input_mapping:
        deployment-vars: git-deployment-vars
        acceptance-tests: cf-acceptance-tests
      params: &aws-bits-service-disabled-run-cats-params
        <<: *aws-bosh-params
        DEPLOYMENT_NAME: cf
        ENVIRONMENT_NAME: aws
        CF_DOMAIN: {{aws-cf1-domain}}
        BLUEMIX_USERNAME: {{bluemix_cloudfoundry_username}}
        BLUEMIX_PASSWORD: {{bluemix_cloudfoundry_password}}
        METRICS_API_KEY:  {{ibm_metrics_api_key}}
        BITS_SERVICE_ENABLEMENT: without-bits-service
      on_failure: &inform-pipeline-operator-diego-aws-cats
        task: inform-pipeline-operator
        file: ci-tasks/tasks/echo.yml
        params:
          MESSAGE: |
              Consider doing a fresh deployment by manually running job
              [manually-delete-cf-diego-aws]
              (https://flintstone.ci.cf-app.com/pipelines/bits-service/jobs/manually-delete-cf-diego-aws)

    - do:
      - task: Run performance tests (v2-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
          bits-service-release: (( grab switch.bits-service-release ))
        params: &aws-bits-service-disabled-run-perf-tests-params
          DEPLOYMENT_NAME: cf
          ENVIRONMENT_NAME: aws
          BLUEMIX_USERNAME: {{bluemix_cloudfoundry_username}}
          BLUEMIX_PASSWORD: {{bluemix_cloudfoundry_password}}
          METRICS_API_KEY:  {{ibm_metrics_api_key}}
          CF_DOMAIN: {{aws-cf1-domain}}
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_disabled_CCs_1
          LOOP_COUNT: 20
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }
  - attempts: 3
    aggregate:
    - *aws-bits-service-disabled-run-cats
    - do:
      - task: Run performance tests (v3-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
          bits-service-release: (( grab switch.bits-service-release ))
        params:
          <<: *aws-bits-service-disabled-run-perf-tests-params
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_disabled_CCs_1_v3-push
          PERFORMANCE_TEST_SHOULD_USE_V3_PUSH: true
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }

  on_failure: *notify

- name: enable-BITS-SERVICE-diego-and-run-CATs
  serial: true
  serial_groups: [cf-aws-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [deploy-and-test-cf-diego-aws] }
    - { get: stemcell, resource: aws-stemcell, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, passed: [deploy-and-test-cf-diego-aws], trigger: true}
    - { get: cf-deployment-develop, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: git-deployment-vars }
    - { get: cf-acceptance-tests, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: (( grab switch.bits-service-release )), passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: run-after-midnight, passed: [deploy-and-test-cf-diego-aws], trigger: true }
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    output_mapping:
      manifests: cf-with-bits-service-enabled
    params: &bosh-interpolate-aws-bits-service-enabled
      <<: *bosh-interpolate-aws-bits-service-disabled
      OPERATIONS: >
        -o cf-deployment/operations/scale-to-one-az.yml
        -o cf-deployment/operations/use-external-blobstore.yml
        -o cf-deployment/operations/use-s3-blobstore.yml
        -o ci-tasks/operations/scale-diego-cell-instances.yml
  - put: git-deployment-vars
    params:
      rebase: true
      repository: updated/deployment-vars
  - put: aws-diego-deployment
    attempts: 2
    params: &params-aws-deployment-bits-service-enabled
      <<: *params-aws-deployment-bits-service-disabled
      manifest: cf-with-bits-service-enabled/manifest.yml
  - attempts: 3
    aggregate:
    - &aws-bits-service-enabled-run-cats
      task: Run CATs
      file: ci-tasks/tasks/run-cats.yml
      input_mapping:
        deployment-vars: git-deployment-vars
        acceptance-tests: cf-acceptance-tests
      params:
        <<: *aws-bosh-params
        DEPLOYMENT_NAME: cf
        ENVIRONMENT_NAME: aws
        CF_DOMAIN: {{aws-cf1-domain}}
        BLUEMIX_USERNAME: {{bluemix_cloudfoundry_username}}
        BLUEMIX_PASSWORD: {{bluemix_cloudfoundry_password}}
        METRICS_API_KEY:  {{ibm_metrics_api_key}}
        BITS_SERVICE_ENABLEMENT: with-bits-service
      on_failure: *inform-pipeline-operator-diego-aws-cats
    - do:
      - task: Run performance tests (v2-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
          bits-service-release: (( grab switch.bits-service-release ))
        params: &aws-bits-service-enabled-run-perf-tests-params
          DEPLOYMENT_NAME: cf
          ENVIRONMENT_NAME: aws
          BLUEMIX_USERNAME: {{bluemix_cloudfoundry_username}}
          BLUEMIX_PASSWORD: {{bluemix_cloudfoundry_password}}
          METRICS_API_KEY:  {{ibm_metrics_api_key}}
          CF_DOMAIN: {{aws-cf1-domain}}
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_enabled_CCs_1
          LOOP_COUNT: 20
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }
  - attempts: 3
    aggregate:
    - *aws-bits-service-enabled-run-cats
    - do:
      - task: Run performance tests (v3-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
          bits-service-release: (( grab switch.bits-service-release ))
        params:
          <<: *aws-bits-service-enabled-run-perf-tests-params
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_enabled_CCs_1_v3-push
          PERFORMANCE_TEST_SHOULD_USE_V3_PUSH: true
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }
  on_failure: *notify

- name: deploy-and-test-cf-blobstore-local
  serial: true
  serial_groups: [cf-blobstore-local]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true}
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))],}
    - { get: stemcell, resource: boshlite-stemcell, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-develop, trigger: true }
    - { get: git-deployment-vars }
    - { get: cf-smoke-tests, trigger: true }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: run-after-midnight, trigger: true }
    - { get: blobstore-local-bosh-lite-ready-for-deployment-events, trigger: true }
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    params:
      BOSH_TARGET: {{blobstore-local-bosh-target}}
      DEPLOYMENT_NAME: cf
      ENVIRONMENT_NAME: blobstore-local
      BLOBSTORE_TYPE: local
      IAAS: bosh-lite
      # TODO: remove these operations. They are very likely not used, because this is a deployment *with* bits-service.
      OPERATIONS: >
        -o cf-deployment/operations/scale-to-one-az.yml
        -o ci-tasks/operations/use-local-blobstore.yml
        -o ci-tasks/operations/bits-service-scale-to-one-az.yml
        -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
  - aggregate:
    - put: git-deployment-vars
      params:
        repository: updated/deployment-vars
        rebase: true
    - do:
      - task: merge release tarballs
        file: ci-tasks/tasks/merge-resources.yml
        input_mapping: { a: capi-release-tarball, b: (( grab switch.bits-service-release-tarball )) }
        output_mapping: { merged: releases }
      - task: make blobstore-local-cf-deployment
        file: ci-tasks/tasks/bosh-deploy.yml
        attempts: 2
        input_mapping:
          stemcells: stemcell
          vars-store: git-deployment-vars
        params:
          HOSTS_ENTRY_FILE: environments/softlayer/director/blobstore-local-bosh-lite/hosts
          DEPLOYMENT_NAME: cf
          VARS_STORE_FILE: environments/softlayer/director/blobstore-local-bosh-lite/vars.yml
  - task: Run Smoke Tests
    attempts: 3
    file: ci-tasks/tasks/run-smoke-tests.yml
    input_mapping:
      deployment-vars: git-deployment-vars
    params:
      <<: *blobstore-local-bosh-params
      DEPLOYMENT_NAME: cf
      ENVIRONMENT_NAME: blobstore-local
    on_failure:
      task: inform-pipeline-operator
      file: ci-tasks/tasks/echo.yml
      params:
        MESSAGE: |
            Consider doing a fresh deployment by manually running job
            [manually-delete-cf-diego-aws]
            (https://flintstone.ci.cf-app.com/pipelines/bits-service/jobs/deploy-and-test-cf-blobstore-local)

  on_failure: *notify

# delete standalone bits-service deployment
- name: delete-deployment-bits-service-local
  plan:
    - aggregate:
      - { get: daily-morning-timer, trigger: true }
      - { get: ci-tasks, resource: bits-service-ci }
      - { get: bits-service-local-sl-deployment-events, params: { bump: major } }
    - task: delete-deployment
      file: ci-tasks/tasks/delete-deployment.yml
      params:
        <<: *sl-bosh-params
        DEPLOYMENT_NAME: bits-service-local
    - put: bits-service-local-sl-deployment-events
      params: { file: bits-service-local-sl-deployment-events/number }
  on_failure: *notify

- name: delete-deployment-bits-service-webdav
  plan:
    - aggregate:
      - { get: daily-morning-timer, trigger: true }
      - { get: ci-tasks, resource: bits-service-ci }
      - { get: bits-service-webdav-sl-deployment-events, params: { bump: major } }
    - task: delete-deployment
      file: ci-tasks/tasks/delete-deployment.yml
      params:
        <<: *sl-bosh-params
        DEPLOYMENT_NAME: bits-service-webdav
    - put: bits-service-webdav-sl-deployment-events
      params: { file: bits-service-webdav-sl-deployment-events/number }
  on_failure: *notify

- name: delete-deployment-bits-service-s3
  plan:
    - aggregate:
      - { get: daily-morning-timer, trigger: true }
      - { get: ci-tasks, resource: bits-service-ci }
      - { get: bits-service-s3-sl-deployment-events, params: { bump: major } }
    - task: delete-deployment
      file: ci-tasks/tasks/delete-deployment.yml
      params:
        <<: *sl-bosh-params
        DEPLOYMENT_NAME: bits-service-s3
    - put: bits-service-s3-sl-deployment-events
      params: { file: bits-service-s3-sl-deployment-events/number }
  on_failure: *notify

- name: migration-bosh1 (S3)
  serial: true
  serial_groups: [cf-bosh1-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))] }
    - { get: cf-bosh1-deployment-events, trigger: true }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-develop, trigger: true }
    - { get: migration-s3-bosh-lite-ready-for-deployment-events, trigger: true }
    - { get: git-deployment-vars }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: bits-service-migration-tests, trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service disabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-develop
        deployment-vars: git-deployment-vars
      params: &bosh-interpolate-boshlite1-bits-service-disabled
        DEPLOYMENT_NAME: cf
        ENVIRONMENT_NAME: migration-s3
        BLOBSTORE_TYPE: s3
        IAAS: bosh-lite
        OPERATIONS: >
          -o cf-deployment/operations/scale-to-one-az.yml
          -o cf-deployment/operations/use-external-blobstore.yml
          -o cf-deployment/operations/use-s3-blobstore.yml
          -o ci-tasks/operations/disable-bits-service.yml
          -o ci-tasks/operations/bits-service-scale-to-one-az.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
        VARIABLES: >
          -v aws_region={{cf-migration-s3-blobstore-region}}
          -v blobstore_access_key_id={{cf-migration-s3-blobstore-access-key-id}}
          -v blobstore_secret_access_key={{cf-migration-s3-blobstore-secret-access-key}}
          -v resource_directory_key={{cf-migration-s3-blobstore-bucket-name}}
          -v buildpack_directory_key={{cf-migration-s3-blobstore-bucket-name}}
          -v droplet_directory_key={{cf-migration-s3-blobstore-bucket-name}}
          -v app_package_directory_key={{cf-migration-s3-blobstore-bucket-name}}
    - &merge-release-tarballs
      task: Merge release tarballs
      file: ci-tasks/tasks/merge-resources.yml
      input_mapping: { a: capi-release-tarball, b: (( grab switch.bits-service-release-tarball )) }
      output_mapping: { merged: releases }
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - &make-migration-s3-deployment
      task:  Make deployment
      file: ci-tasks/tasks/bosh-deploy.yml
      attempts: 2
      input_mapping:
        stemcells: stemcell
        vars-store: git-deployment-vars
      params: &params-
        HOSTS_ENTRY_FILE: environments/softlayer/director/migration-s3-bosh-lite/hosts
        DEPLOYMENT_NAME: cf
        VARS_STORE_FILE: environments/softlayer/director/migration-s3-bosh-lite/vars.yml
  - task: Run migration preparation tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: &migration-tests-input-mappings
      bits-service-release: (( grab switch.bits-service-release ))
      deployment-vars: git-deployment-vars
    params: &boshlite1-bsmt-preparation-params
      test_suite: preparation
      ENVIRONMENT_NAME: migration-s3
      BSMT_PERSISTENT_ORG: BSMT-persistent-org
      BSMT_PERSISTENT_SPACE: BSMT-persistent-space
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    params: &bosh-interpolate-boshlite1-bits-service-enabled
      <<: *bosh-interpolate-boshlite1-bits-service-disabled
      OPERATIONS: >
        -o cf-deployment/operations/scale-to-one-az.yml
        -o cf-deployment/operations/use-external-blobstore.yml
        -o cf-deployment/operations/use-s3-blobstore.yml
        -o ci-tasks/operations/bits-service-scale-to-one-az.yml
        -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
  - aggregate:
    - *make-migration-s3-deployment
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
  - task: Run migration verification tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: &boshlite1-bsmt-verification-params
      <<: *boshlite1-bsmt-preparation-params
      test_suite: verification
  on_failure: *notify

- name: migration-backwards-bosh1
  serial: true
  serial_groups: [cf-bosh1-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [migration-bosh1 (S3)], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [migration-bosh1 (S3)], trigger: true}
    - { get: (( grab switch.bits-service-release-version )), passed: [migration-bosh1 (S3)] }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: cf-deployment-develop, passed: [migration-bosh1 (S3)], trigger: true }
    - { get: git-deployment-vars }
    - { get: (( grab switch.bits-service-release )), passed: [migration-bosh1 (S3)], trigger: true }
    - { get: bits-service-migration-tests, passed: [migration-bosh1 (S3)], trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service enabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-develop
        deployment-vars: git-deployment-vars
      params: *bosh-interpolate-boshlite1-bits-service-enabled
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-s3-deployment
  - task: Run migration preparation tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: *boshlite1-bsmt-preparation-params
  - task: Generate CF deployment manifest with bits-service disabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    params: *bosh-interpolate-boshlite1-bits-service-disabled
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-s3-deployment
  - task: Run migration verification tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: *boshlite1-bsmt-verification-params
  on_failure: *notify

- name: migration-bosh2 (webdav)
  serial: true
  serial_groups: [cf-bosh2-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [(( grab switch.create-and-upload-release ))],trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [(( grab switch.create-and-upload-release ))], }
    - { get: cf-bosh2-deployment-events, trigger: true }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-develop, trigger: true }
    - { get: migration-webdav-bosh-lite-ready-for-deployment-events, trigger: true }
    - { get: git-deployment-vars }
    - { get: (( grab switch.bits-service-release )), passed: [(( grab switch.create-and-upload-release ))], trigger: true }
    - { get: bits-service-migration-tests, trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service disabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-develop
        deployment-vars: git-deployment-vars
      params: &bosh-interpolate-boshlite2-bits-service-disabled
        BOSH_TARGET: {{bosh2-target}}
        DEPLOYMENT_NAME: cf
        ENVIRONMENT_NAME: migration-webdav
        BLOBSTORE_TYPE: webdav
        IAAS: bosh-lite
        OPERATIONS: >
          -o cf-deployment/operations/use-compiled-releases.yml
          -o cf-deployment/operations/experimental/use-bosh-dns.yml
          -o 1-click/operations/add-dns-alias-internal-public-access-entry.yml
          -o cf-deployment/operations/scale-to-one-az.yml
          -o ci-tasks/operations/disable-bits-service.yml
          -o ci-tasks/operations/bits-service-scale-to-one-az.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - &make-migration-webdav-deployment
      task:  Make deployment
      file: ci-tasks/tasks/bosh-deploy.yml
      attempts: 2
      input_mapping:
        stemcells: stemcell
        vars-store: git-deployment-vars
      params:
        HOSTS_ENTRY_FILE: environments/softlayer/director/migration-webdav-bosh-lite/hosts
        DEPLOYMENT_NAME: cf
        VARS_STORE_FILE: environments/softlayer/director/migration-webdav-bosh-lite/vars.yml
  - task: Run migration preparation tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: &boshlite2-bsmt-preparation-params
      <<: *boshlite1-bsmt-preparation-params
      ENVIRONMENT_NAME: migration-webdav
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    params: &bosh-interpolate-boshlite2-bits-service-enabled
      <<: *bosh-interpolate-boshlite2-bits-service-disabled
      OPERATIONS: >
        -o cf-deployment/operations/use-compiled-releases.yml
        -o cf-deployment/operations/experimental/use-bosh-dns.yml
        -o 1-click/operations/add-dns-alias-internal-public-access-entry.yml
        -o cf-deployment/operations/scale-to-one-az.yml
        -o ci-tasks/operations/bits-service-scale-to-one-az.yml
        -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-webdav-deployment
  - task: Run migration verification tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: &boshlite2-bsmt-verification-params
      <<: *boshlite2-bsmt-preparation-params
      test_suite: verification
  on_failure: *notify

- name: migration-backwards-bosh2
  serial: true
  serial_groups: [cf-bosh2-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: (( grab switch.bits-service-release-tarball )), passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: (( grab switch.bits-service-release-version )), passed: [migration-bosh2 (webdav)] }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: cf-deployment-develop, passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: git-deployment-vars }
    - { get: (( grab switch.bits-service-release )), passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: bits-service-migration-tests, passed: [migration-bosh2 (webdav)], trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service enabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-develop
        deployment-vars: git-deployment-vars
      params: *bosh-interpolate-boshlite2-bits-service-enabled
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-webdav-deployment
  - task: Run migration preparation tests
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    attempts: 3
    input_mapping: *migration-tests-input-mappings
    params: *boshlite2-bsmt-preparation-params
  - task: Generate CF deployment manifest with bits-service disabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-develop
      deployment-vars: git-deployment-vars
    params: *bosh-interpolate-boshlite2-bits-service-disabled
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-webdav-deployment
  - task: Run migration verification tests
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    attempts: 3
    input_mapping: *migration-tests-input-mappings
    params: *boshlite2-bsmt-verification-params
  on_failure: *notify

# Infrastructure
- name: recreate-bosh-lite-1
  serial: true
  plan:
  - aggregate:
    - { get: daily-morning-timer, trigger: true }
    - get: ci-tasks
      resource: bits-service-ci
    - get: bosh1-recreation-events
      params: { bump: major }
  - task: recreate-bosh-lite
    file: ci-tasks/tasks/recreate-bosh-lite.yml
    params:
      SSH_CONNECTION_STRING: root@10.155.171.3
      SSH_KEY: {{github-private-key}}
      BOSH_USERNAME: {{bosh-username}}
      BOSH_PASSWORD: {{bosh-password}}
      BOSH_DIRECTOR_IP: 192.168.50.4
      VAGRANT_GATEWAY: 192.168.50.1
  - put: bosh1-recreation-events
    params: { file: bosh1-recreation-events/number }
  on_failure: *notify

- name: recreate-bosh-lite-2
  serial: true
  plan:
  - aggregate:
    - { get: daily-morning-timer, trigger: true }
    - get: ci-tasks
      resource: bits-service-ci
    - get: bosh2-recreation-events
      params: { bump: major }
  - task: recreate-bosh-lite
    file: ci-tasks/tasks/recreate-bosh-lite.yml
    params:
      SSH_CONNECTION_STRING: root@10.155.171.22
      SSH_KEY: {{github-private-key}}
      BOSH_USERNAME: {{bosh2-username}}
      BOSH_PASSWORD: {{bosh2-password}}
      BOSH_DIRECTOR_IP: 192.168.50.4
      VAGRANT_GATEWAY: 192.168.50.1
  - put: bosh2-recreation-events
    params: { file: bosh2-recreation-events/number }
  on_failure: *notify

- name: cleanup-bosh-sl
  serial: true
  plan:
  - get: ci-tasks
    resource: bits-service-ci
  - get: nightly-timer
    trigger: true
  - task: cleanup-bosh
    file: ci-tasks/tasks/bosh-cleanup.yml
    params: *sl-bosh-params
  on_failure: *notify

- name: cleanup-bosh-aws
  serial: true
  plan:
  - get: ci-tasks
    resource: bits-service-ci
  - get: nightly-timer
    trigger: true
  - task: cleanup-bosh
    file: ci-tasks/tasks/bosh-cleanup.yml
    params: *aws-bosh-params
  on_failure: *notify

- name: Sync cf-deployment fork (develop)
  plan:
    - aggregate:
      - get: cf-deployment-develop
      - get: cf-deployment-develop-upstream
        trigger: true
      - get: ci-tasks
        resource: bits-service-ci
    - task: sync
      file: ci-tasks/tasks/sync-repo.yml
      input_mapping:
        fork-repo: cf-deployment-develop
        upstream-repo: cf-deployment-develop-upstream
      params: { BRANCH: develop }
    - put: cf-deployment-develop
      params: { repository: synced-repo, force: true }

- name: Sync cf-deployment fork (master)
  plan:
    - aggregate:
      - get: cf-deployment-master
      - get: cf-deployment-master-upstream
        trigger: true
      - get: ci-tasks
        resource: bits-service-ci
    - task: sync
      file: ci-tasks/tasks/sync-repo.yml
      input_mapping:
        fork-repo: cf-deployment-master
        upstream-repo: cf-deployment-master-upstream
      params: { BRANCH: master }
    - put: cf-deployment-master
      params: { repository: synced-repo, force: true }

- name: Sync capi-release fork
  plan:
    - aggregate:
      - get: capi-release
      - get: capi-release-upstream
        trigger: true
      - get: ci-tasks
        resource: bits-service-ci
    - task: sync
      file: ci-tasks/tasks/sync-repo.yml
      input_mapping:
        fork-repo: capi-release
        upstream-repo: capi-release-upstream
      params: { BRANCH: master }
    - put: capi-release
      params: { repository: synced-repo, force: true }

groups:
- name: all
  jobs:
  - run-bits-service-client-tests
  - run-bitsgo-unit-tests
  - Publish gem
  - create-and-upload-bitsgo-release
  - deploy-with-S3
  - deploy-with-LOCAL
  - deploy-with-WEBDAV
  - deploy-and-test-with-s3-cf-softlayer
  - run-system-tests-S3
  - run-system-tests-LOCAL
  - run-system-tests-WEBDAV
  - create-capi-release
  - deploy-and-test-cf-diego-aws
  - enable-BITS-SERVICE-diego-and-run-CATs
  - migration-bosh1 (S3)
  - migration-bosh2 (webdav)
  - migration-backwards-bosh1
  - migration-backwards-bosh2
  - bump-bits-service-release-bitsgo
  - Publish Dev Release
  - Publish Final Release
  - Sync cf-deployment fork (develop)
  - Sync cf-deployment fork (master)
  - Sync capi-release fork
  - deploy-and-test-cf-blobstore-local
- name: release
  jobs:
  - bump-bits-service-release-bitsgo
  - create-and-upload-bitsgo-release
  - run-bitsgo-contract-integration-test-azure
  - run-bitsgo-contract-integration-test-cos
  - run-bitsgo-contract-integration-test-google-gcp
  - run-bitsgo-contract-integration-test-google-s3
  - run-bitsgo-contract-integration-test-openstack
  - run-bitsgo-contract-integration-test-s3
  - run-bitsgo-contract-integration-test-alibaba
  - run-bitsgo-unit-tests
- name: bits-service-client
  jobs:
  - run-bits-service-client-tests
  - Publish gem
- name: capi-release
  jobs:
  - create-capi-release
  - deploy-and-test-cf-diego-aws
  - enable-BITS-SERVICE-diego-and-run-CATs
  - Publish Dev Release
- name: migration
  jobs:
  - migration-backwards-bosh1
  - migration-bosh1 (S3)
  - migration-backwards-bosh2
  - migration-bosh2 (webdav)
- name: infrastructure
  jobs:
  - recreate-bosh-lite-1
  - recreate-bosh-lite-2
  - cleanup-bosh-aws
  - cleanup-bosh-sl
  - manually-delete-cf-diego-aws
  - manually-delete-s3-cf-softlayer
  - delete-deployment-bits-service-local
  - delete-deployment-bits-service-s3
  - delete-deployment-bits-service-webdav

resource_types:
- name: bosh2-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook}}

- name: aws-stemcell
  type: bosh-io-stemcell
  source: { name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent }

- name: boshlite-stemcell
  type: bosh-io-stemcell
  source: { name: bosh-warden-boshlite-ubuntu-trusty-go_agent}

- name: softlayer-stemcell
  type: bosh-io-stemcell
  source: { name: bosh-softlayer-xen-ubuntu-trusty-go_agent }

- name: bits-service-release-bitsgo-tarball
  type: s3
  source: &s3-resource
    access_key_id: {{s3-blobstore-access-key-id}}
    secret_access_key: {{s3-blobstore-secret-access-key}}
    bucket: ci-bits-service-artifacts
    region_name: eu-west-1
    regexp: bits-service-release-bitsgo/bits-service-(.*).tgz
    private: false

- name: capi-release-tarball
  type: s3
  source:
    <<: *s3-resource
    regexp: capi-release/capi-(.*).tgz

- name: bits-service-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: master
    private_key: {{github-private-key}}
    paths: ["manifests/*", "scripts/*", "tasks/*", "operations/*"]

- name: cf-deployment-develop
  type: git
  source:
    uri: git@github.com:petergtz/cf-deployment.git
    branch: develop
    private_key: {{github-private-key}}

- name: cf-deployment-develop-upstream
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: develop

- name: cf-deployment-master
  type: git
  source:
    uri: git@github.com:petergtz/cf-deployment.git
    branch: master
    private_key: {{github-private-key}}

- name: cf-deployment-master-upstream
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: master

- name: git-deployment-vars
  type: git
  source:
    uri: git@github.com:cloudfoundry/bits-service-private-config.git
    branch: master
    private_key: {{github-private-key}}
    disable_ci_skip: true

- name: bitsgo
  type: git
  source:
    uri: https://github.com/petergtz/bitsgo.git
    private_key: {{github-private-key}}

- name: bits-service-client
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-client.git
    branch: master
    private_key: {{github-private-key}}

- name: bits-service-release-bitsgo
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-release.git
    branch: master
    private_key: {{github-private-key}}

- name: bits-service-migration-tests
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-migration-tests.git
    branch: master
    private_key: {{github-private-key}}

- name: bits-service-github-final-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bits-service-release
    access_token: {{github-access-token}}
    release: true
    drafts: true

- name: capi-release-upstream
  type: git
  source:
    uri: https://github.com/cloudfoundry/capi-release.git
    branch: master

- name: capi-release
  type: git
  source:
    uri: git@github.com:petergtz/capi-release.git
    branch: master
    private_key: {{github-private-key}}

- name: cf-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git
    branch: master

- name: cf-smoke-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-smoke-tests.git

- name: nightly-timer
  type: time
  source:
    interval: 24h

- name: daily-morning-timer
  type: time
  source:
    interval: 24h
    start: 4:00 AM
    stop: 5:00 AM
    location: Europe/Berlin

- name: aws-diego-deployment
  type: bosh-deployment
  source:
    target: {{aws-bosh-target}}
    username: {{aws-bosh-username}}
    password: {{aws-bosh-password}}
    deployment: cf

- name: bosh-deployment-bits-service-local
  type: bosh2-deployment
  source: &sl-bosh-deployment-source
    target: {{sl-bosh-target}}
    username: {{sl-bosh-username}}
    password: {{sl-bosh-password}}
    client: {{sl-bosh-username}}
    client_secret: {{sl-bosh-password}}
    deployment: bits-service-local
    ca_cert: {{sl-bosh-ca-cert}}

- name: bosh-deployment-bits-service-webdav
  type: bosh2-deployment
  source:
    <<: *sl-bosh-deployment-source
    deployment: bits-service-webdav

- name: bosh-deployment-bits-service-s3
  type: bosh2-deployment
  source:
    <<: *sl-bosh-deployment-source
    deployment: bits-service-s3

- name: softlayer-cf-deployment
  type: bosh2-deployment
  source:
    <<: *sl-bosh-deployment-source
    deployment: cf

- name: capi-release-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: metadata
    file: version/capi-release/version
    private_key: {{github-private-key}}
    initial_version: 1.41.0-dev.1

- name: bits-service-release-bitsgo-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: metadata
    file: version/bits-service-release-bitsgo/version
    private_key: {{github-private-key}}
    initial_version: 2.0.0-dev.1

- name: cf-bosh1-deployment-events
  type: semver
  source: &deployment-events-source
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: events
    file: events/cf-bosh1/deployment-deleted
    private_key: {{github-private-key}}

- name: cf-bosh2-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events/cf-bosh2/deployment-deleted

- name: bosh1-recreation-events
  type: semver
  source: &recreation-events-source
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: events
    file: events/bosh1/recreated
    private_key: {{github-private-key}}

- name: bosh2-recreation-events
  type: semver
  source:
    <<: *recreation-events-source
    file: events/bosh2/recreated

- name: cf-diego-aws-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events/cf-diego-aws/deployment-deleted

- name: s3-cf-softlayer-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events/cf-sl-deployment-deleted

- name: bits-service-s3-sl-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events/bits-service-s3-sl-deployment-deleted

- name: bits-service-local-sl-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events/bits-service-local-sl-deployment-deleted

- name: bits-service-webdav-sl-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events/bits-service-webdav-sl-deployment-deleted

- name: blobstore-local-bosh-lite-ready-for-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events-bosh-lites-blobstore-local-bosh-lite-ready
    uri: git@github.com:cloudfoundry/bits-service-private-config.git

- name: migration-s3-bosh-lite-ready-for-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events-bosh-lites-migration-s3-bosh-lite-ready
    uri: git@github.com:cloudfoundry/bits-service-private-config.git

- name: migration-webdav-bosh-lite-ready-for-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events-bosh-lites-migration-webdav-bosh-lite-ready
    uri: git@github.com:cloudfoundry/bits-service-private-config.git

- name: bits-service-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bits-service-release
    access_token: {{github-access-token}}
    release: false
    pre_release: true

- name: run-after-midnight
  type: time
  source:
    start: 12:00 AM
    stop: 1:00 AM
    location: Europe/Berlin
