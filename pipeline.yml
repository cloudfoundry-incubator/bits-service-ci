bosh2-params: &bosh2-params
  BOSH_USERNAME: ((bosh2-username))
  BOSH_PASSWORD: ((bosh2-password))

aws-bosh-params: &aws-bosh-params
  BOSH_TARGET: ((aws-bosh-target))
  BOSH_USERNAME: ((aws-bosh-username))
  BOSH_PASSWORD: ((aws-bosh-password))

notify: &notify
  put: slack
  params:
    text: |
      $TEXT_FILE_CONTENT The Concourse pipeline broke. See:
      $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    text_file: points-of-contact/slack-users-single-line

jobs:
# BITS-SERVICE
- name: run-bitsgo-unit-tests
  serial: true
  build_logs_to_retain: 100
  plan:
  - aggregate:
    - { get: bits-service, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bitsgo-unit-tests.yml
  on_failure: *notify
- name: run-bitsgo-contract-integration-test-openstack
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: openstack
      INTEGRATION_TEST_SETUP: ((openstack_integration_test_config))
  on_failure: *notify


- name: run-bitsgo-contract-integration-test-cos
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: S3
      INTEGRATION_TEST_SETUP: ((cos_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-s3
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: S3
      INTEGRATION_TEST_SETUP: ((s3_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-azure
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: azure
      INTEGRATION_TEST_SETUP: ((azure_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-google-gcp
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: GCP
      INTEGRATION_TEST_SETUP: ((google_gcp_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-google-s3
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: S3
      INTEGRATION_TEST_SETUP: ((google_s3_integration_test_config))
  on_failure: *notify

- name: run-bitsgo-contract-integration-test-alibaba
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service, passed: [run-bitsgo-unit-tests], trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-contract-integration-tests.yml
    params:
      BLOBSTORE_TYPE: alibaba
      INTEGRATION_TEST_SETUP: ((alibaba_integration_test_config))
  on_failure: *notify

- name: bump-bits-service-release-bitsgo
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - get: bits-service
      passed:
        - run-bitsgo-unit-tests
        - run-bitsgo-contract-integration-test-openstack
        - run-bitsgo-contract-integration-test-cos
        - run-bitsgo-contract-integration-test-s3
        - run-bitsgo-contract-integration-test-azure
        # TODO uncommment as soon as we have IBM sponsored Google and Alibaba accounts
        # - run-bitsgo-contract-integration-test-google-gcp
        # - run-bitsgo-contract-integration-test-google-s3
        # - run-bitsgo-contract-integration-test-alibaba
      trigger: true
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: bits-service-release, params: { clean_tags: true } }
  - task: Bump bits-service-release
    file: ci-tasks/tasks/bump-release.yml
    input_mapping:
      git-repo: bits-service-release
      git-sub-repo: bits-service
    params:
      SUB_MODULE_PATH: src/github.com/cloudfoundry-incubator/bits-service
  - put: bits-service-release
    params:
      repository: bumped/git-repo
      rebase: true
  on_failure: *notify

- name: run-bits-service-client-tests
  build_logs_to_retain: 100
  serial: true
  plan:
  - { get: bits-service-client, trigger: true }
  - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    file: ci-tasks/tasks/run-bits-service-client-tests.yml
    attempts: 3
  on_failure: *notify

- name: Publish gem
  build_logs_to_retain: 100
  serial: true
  plan:
  - { get: bits-service-client, passed: [run-bits-service-client-tests], trigger: true }
  - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Publish to rubygems.org
    file: ci-tasks/tasks/publish-gem.yml
    params:
      GIT_PRIVATE_KEY: ((github-private-key))
      RUBYGEMS_API_KEY: ((rubygems-api-key))
  on_failure: *notify

- name: create-and-upload-release
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service-release-version, params: { pre: dev } }
    - { get: bits-service-release, trigger: true, params: { clean_tags: true }, passed: [ run-system-tests-S3, run-system-tests-LOCAL, run-system-tests-WEBDAV ] }
    - { get: ci-tasks, resource: bits-service-ci }
  - put: bits-service-release-version
    params: { file: bits-service-release-version/version }
  - aggregate:
    - do:
      - task: Create release
        file: ci-tasks/tasks/create-bits-release.yml
        params:
          VERSION_FILE: bits-service-release-version/version
      - aggregate:
        - put: bits-service-release-tarball
          params: { file: releases/*.tgz }
        - put: bits-service-release
          params:
            repository: bits-service-release
            tag: bits-service-release-version/version
            only_tag: true
    - do:
      - task: get-image-artifacts
        file: ci-tasks/tasks/get-image-artifacts.yml
      - put: bits-docker-release
        params:
            build: docker-parts/docker
            additional_tags: bits-service-release-version/version
    - do:
      - task: get-eirinifs-download-image-artifacts
        file: ci-tasks/tasks/get-image-artifacts.yml
      - put: eirinifs-downloader-docker-release
        params:
            build: docker-parts/docker/eirini-rootfs-downloader
            additional_tags: bits-service-release-version/version



  on_failure: *notify

- name: run-system-tests-S3
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service-release, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests (without proxied GET requests)
    attempts: 3
    file: ci-tasks/tasks/run-release-tests-non-bosh.yml
    params:
      BITS_DIRECTORY_KEY: ((s3-blobstore-bucket-name))
      BITS_AWS_REGION: ((s3-blobstore-region))
      AWS_ACCESS_KEY_ID: ((s3-blobstore-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((s3-blobstore-secret-access-key))
      BLOBSTORE_TYPE: s3
  - task: Run tests (with proxied GET requests)
    attempts: 3
    file: ci-tasks/tasks/run-release-tests-non-bosh.yml
    params:
      BITS_DIRECTORY_KEY: ((s3-blobstore-bucket-name))
      BITS_AWS_REGION: ((s3-blobstore-region))
      AWS_ACCESS_KEY_ID: ((s3-blobstore-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((s3-blobstore-secret-access-key))
      BLOBSTORE_TYPE: s3
      SHOULD_PROXY_GET_REQUESTS: true

  on_failure: *notify

- name: run-system-tests-LOCAL
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service-release, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-release-tests-non-bosh.yml
    params:
      BLOBSTORE_TYPE: local
  on_failure: *notify

- name: run-system-tests-WEBDAV
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: bits-service-release, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
  - task: Run tests
    attempts: 3
    file: ci-tasks/tasks/run-release-tests-non-bosh.yml
    params:
      BLOBSTORE_TYPE: webdav
  on_failure: *notify

# CAPI-RELEASE
- name: create-capi-release
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: capi-release, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: bits-service-client, passed: [Publish gem], trigger: true }
  - task: Create capi-release tarball
    file: ci-tasks/tasks/create-capi-release.yml
    input_mapping:
      capi-release: capi-release
    params:
      VERSION_FILE: capi-release-version/number
  - put: capi-release-tarball
    params: { file: releases/*.tgz }
  - put: capi-release-version
    params: { file: capi-release-version/number }
  on_failure: *notify

- name: Testing done
  build_logs_to_retain: 100
  plan:
  - aggregate:
    - get: capi-release-tarball
      passed: &acceptance-tests-passed
        - enable-BITS-SERVICE-diego-and-run-CATs
        - migration-backwards-bosh1
        - migration-backwards-bosh2
        - Deploy CF and run CC Updater tests
        - run-CATs-in-bitsgo-aws-s3-bosh-lite
        - run-CATs-in-bitsgo-cos-s3-bosh-lite
        - run-CATs-in-bitsgo-azure-bosh-lite
        # TODO uncomment when we have IBM provided accounts
        # - run-CATs-in-bitsgo-google-s3-bosh-lite
        # - run-CATs-in-bitsgo-google-service-account-bosh-lite
        # - run-CATs-in-bitsgo-alibaba-bosh-lite
        - run-CATs-in-bitsgo-local-bosh-lite
        - run-CATs-in-bitsgo-openstack-bosh-lite
        - run-CATs-in-bitsgo-webdav-bosh-lite
      trigger: true
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - get: bits-service-release-tarball
      passed: *acceptance-tests-passed
      trigger: true
    - { get: bits-service-release-version, passed: *acceptance-tests-passed }
    - { get: bits-service-release, passed: *acceptance-tests-passed }

- name: Publish Dev Release
  build_logs_to_retain: 100
  plan:
  - aggregate:
    - get: capi-release-tarball
      passed: [ Testing done ]
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: bits-service-release-tarball, passed: [ Testing done ] }
    - { get: bits-service-release-version, passed: [ Testing done ] }
  - aggregate:
    - task: Publish release tarball URLs
      file: ci-tasks/tasks/publish-release-tarball-urls.yml
      input_mapping:
        bits-service-release-tarball: bits-service-release-tarball
      params:
        RELEASE_TARBALL_DIRS: capi-release-tarball bits-service-release-tarball
    - put: bits-service-github-release
      params:
        name: bits-service-release-version/version
        tag: bits-service-release-version/version
        globs:
          - "bits-service-release-tarball/*.tgz"
  on_failure: *notify

- name: Publish Final Release
  build_logs_to_retain: 100
  plan:
  - aggregate:
    - get: bits-service-release
      passed: [ Testing done ]
    - get: bits-service-release-version
      passed: [ Testing done ]
      params: { bump: minor }
    - get: ci-tasks
      resource: bits-service-ci
    # - get: cf-deployment-master
  - task: Promote Release
    file: ci-tasks/tasks/promote-bits-service-final-release.yml
    input_mapping:
      release-version: bits-service-release-version
      release-git-repo: bits-service-release
    params:
      PRIVATE_YML_CONTENT: ((private-yml))
  - do:
    - put: bits-service-release
      params:
        repository: release-git-repo-final
        tag: bits-service-release-version/version
        rebase: true
    - put: bits-service-github-final-release
      params:
        name: bits-service-release-version/version
        tag: bits-service-release-version/version
        globs: [ "release-tarball/*.tgz" ]
    - put: bits-service-release-version
      params: { file: bits-service-release-version/version }

  on_failure: *notify

- name: manually-delete-cf-diego-aws
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: cf-diego-aws-deployment-events, params: { bump: major } }
  - task: delete-deployment
    file: ci-tasks/tasks/delete-deployment.yml
    params:
      <<: *aws-bosh-params
      DEPLOYMENT_NAME: cf
  - put: cf-diego-aws-deployment-events
    params: { file: cf-diego-aws-deployment-events/number }
  on_failure: *notify

- name: deploy-and-test-cf-diego-aws
  build_logs_to_retain: 100
  serial: true
  serial_groups: [cf-aws-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: bits-service-release-tarball, passed: [create-and-upload-release], trigger: true }
    - { get: bits-service-release-version, passed: [create-and-upload-release] }
    - { get: cf-diego-aws-deployment-events, trigger: true}
    - { get: stemcell, resource: aws-stemcell, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-master, trigger: true }
    - { get: git-deployment-vars }
    - { get: cf-acceptance-tests, trigger: true }
    - { get: bits-service-release, passed: [create-and-upload-release], trigger: true }
    - { get: run-after-midnight, trigger: true }
  - aggregate:
    - task: Generate CF deployment manifest with bits-service disabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params: &bosh-interpolate-aws-bits-service-disabled
        BOSH_TARGET: ((aws-bosh-target))
        ENVIRONMENT_NAME: aws
        BLOBSTORE_TYPE: s3
        IAAS: aws
        CF_DOMAIN: ((aws-cf1-domain))
        OPERATIONS: >
          -o cf-deployment/operations/use-compiled-releases.yml
          -o cf-deployment/operations/scale-to-one-az.yml
          -o cf-deployment/operations/use-external-blobstore.yml
          -o cf-deployment/operations/use-s3-blobstore.yml
          -o cf-deployment/operations/use-internal-lookup-for-route-services.yml
          -o ci-tasks/operations/disable-bits-service.yml
          -o ci-tasks/operations/scale-diego-cell-instances.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
          -o ci-tasks/operations/use-iam-profiles.yml
          -o ci-tasks/operations/use-sse.yml
        VARIABLES: >
          -v aws_region="((cf1-s3-blobstore-region))"
          -v blobstore_access_key_id="((cf-migration-s3-blobstore-access-key-id))"
          -v blobstore_secret_access_key="((cf-migration-s3-blobstore-secret-access-key))"
          -v resource_directory_key="((cf1-s3-blobstore-bucket-name))"
          -v buildpack_directory_key="((cf1-s3-blobstore-bucket-name))"
          -v droplet_directory_key="((cf1-s3-blobstore-bucket-name))"
          -v app_package_directory_key="((cf1-s3-blobstore-bucket-name))"
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - &aws-bosh-deploy
      task: bosh deploy
      file: ci-tasks/tasks/bosh-deploy.yml
      attempts: 2
      input_mapping:
        stemcells: stemcell
        vars-store: git-deployment-vars
      params: &aws-bosh-params-new
        HOSTS_ENTRY_FILE: environments/aws/bbl-state/hosts
        DEPLOYMENT_NAME: cf
        VARS_STORE_FILE: environments/aws/bbl-state/vars/director-vars-store.yml
        USE_BOSH_ALL_PROXY: true
        JUMPBOX_VARS_STORE_FILE: environments/aws/bbl-state/vars/jumpbox-vars-store.yml
        JUMPBOX_VARS_FILE: environments/aws/bbl-state/vars/jumpbox-vars-file.yml
  - attempts: 3
    aggregate:
    - &aws-bits-service-disabled-run-cats
      task: Run CATs
      file: ci-tasks/tasks/run-cats.yml
      input_mapping:
        deployment-vars: git-deployment-vars
        acceptance-tests: cf-acceptance-tests
      params: &aws-bits-service-disabled-run-cats-params
        <<: *aws-bosh-params
        DEPLOYMENT_NAME: cf
        ENVIRONMENT_NAME: aws
        CF_DOMAIN: ((aws-cf1-domain))
        BLUEMIX_USERNAME: ((bluemix_cloudfoundry_username))
        BLUEMIX_PASSWORD: ((bluemix_cloudfoundry_password))
        METRICS_API_KEY:  ((ibm_metrics_api_key))
        BITS_SERVICE_ENABLEMENT: without-bits-service
      on_failure: &inform-pipeline-operator-diego-aws-cats
        task: inform-pipeline-operator
        file: ci-tasks/tasks/echo.yml
        params:
          MESSAGE: |
              Consider doing a fresh deployment by manually running job
              [manually-delete-cf-diego-aws]
              (https://ci.flintstone.cf.cloud.ibm.com/pipelines/bits-service/jobs/manually-delete-cf-diego-aws)

    - do:
      - task: Run performance tests (v2-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
        params: &aws-bits-service-disabled-run-perf-tests-params
          DEPLOYMENT_NAME: cf
          ENVIRONMENT_NAME: aws
          BLUEMIX_USERNAME: ((bluemix_cloudfoundry_username))
          BLUEMIX_PASSWORD: ((bluemix_cloudfoundry_password))
          METRICS_API_KEY:  ((ibm_metrics_api_key))
          CF_DOMAIN: ((aws-cf1-domain))
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_disabled_CCs_1
          LOOP_COUNT: 20
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }
  - attempts: 3
    aggregate:
    - *aws-bits-service-disabled-run-cats
    - do:
      - task: Run performance tests (v3-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
        params:
          <<: *aws-bits-service-disabled-run-perf-tests-params
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_disabled_CCs_1_v3-push
          PERFORMANCE_TEST_SHOULD_USE_V3_PUSH: true
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }

  on_failure: *notify

- name: enable-BITS-SERVICE-diego-and-run-CATs
  build_logs_to_retain: 100
  serial: true
  serial_groups: [cf-aws-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: stemcell, resource: aws-stemcell, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: bits-service-release-tarball, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: bits-service-release-version, passed: [deploy-and-test-cf-diego-aws] }
    - { get: ci-tasks, resource: bits-service-ci, passed: [deploy-and-test-cf-diego-aws], trigger: true}
    - { get: cf-deployment-master, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: git-deployment-vars }
    - { get: cf-acceptance-tests, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: bits-service-release, passed: [deploy-and-test-cf-diego-aws], trigger: true }
    - { get: run-after-midnight, passed: [deploy-and-test-cf-diego-aws], trigger: true }
  - aggregate:
    - task: Generate CF deployment manifest with bits-service enabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params: &bosh-interpolate-aws-bits-service-enabled
        <<: *bosh-interpolate-aws-bits-service-disabled
        OPERATIONS: >
          -o cf-deployment/operations/use-compiled-releases.yml
          -o cf-deployment/operations/scale-to-one-az.yml
          -o cf-deployment/operations/use-external-blobstore.yml
          -o cf-deployment/operations/use-s3-blobstore.yml
          -o cf-deployment/operations/use-internal-lookup-for-route-services.yml
          -o ci-tasks/operations/scale-diego-cell-instances.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
          -o ci-tasks/operations/use-iam-profiles.yml
          -o ci-tasks/operations/use-sse.yml
    - *merge-release-tarballs
  - put: git-deployment-vars
    params:
      rebase: true
      repository: updated/deployment-vars
  - *aws-bosh-deploy
  - attempts: 3
    aggregate:
    - &aws-bits-service-enabled-run-cats
      task: Run CATs
      file: ci-tasks/tasks/run-cats.yml
      input_mapping:
        deployment-vars: git-deployment-vars
        acceptance-tests: cf-acceptance-tests
      params:
        <<: *aws-bosh-params
        DEPLOYMENT_NAME: cf
        ENVIRONMENT_NAME: aws
        CF_DOMAIN: ((aws-cf1-domain))
        BLUEMIX_USERNAME: ((bluemix_cloudfoundry_username))
        BLUEMIX_PASSWORD: ((bluemix_cloudfoundry_password))
        METRICS_API_KEY:  ((ibm_metrics_api_key))
        BITS_SERVICE_ENABLEMENT: with-bits-service
      on_failure: *inform-pipeline-operator-diego-aws-cats
    - do:
      - task: Run performance tests (v2-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
        params: &aws-bits-service-enabled-run-perf-tests-params
          DEPLOYMENT_NAME: cf
          ENVIRONMENT_NAME: aws
          BLUEMIX_USERNAME: ((bluemix_cloudfoundry_username))
          BLUEMIX_PASSWORD: ((bluemix_cloudfoundry_password))
          METRICS_API_KEY:  ((ibm_metrics_api_key))
          CF_DOMAIN: ((aws-cf1-domain))
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_enabled_CCs_1
          LOOP_COUNT: 20
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }
  - attempts: 3
    aggregate:
    - *aws-bits-service-enabled-run-cats
    - do:
      - task: Run performance tests (v3-push)
        file: ci-tasks/tasks/run-performance-tests.yml
        input_mapping:
          deployment-vars: git-deployment-vars
        params:
          <<: *aws-bits-service-enabled-run-perf-tests-params
          PERFORMANCE_TEST_METRICS_PREFIX: bits-service_enabled_CCs_1_v3-push
          PERFORMANCE_TEST_SHOULD_USE_V3_PUSH: true
      - task: Copy and commit new metrics
        file: ci-tasks/tasks/commit-metrics.yml
        input_mapping: { state: deployment-vars-out }
        output_mapping: { state-out: metrics-committed }
      - put: git-deployment-vars
        params: { repository: metrics-committed, rebase: true }
  on_failure: *notify

- name:  Deploy CF and run CC Updater tests
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - { get: stemcell, resource: boshlite-stemcell, trigger: true }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-master, trigger: true }
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: 1-click, trigger: true }
    - { get: cc-updater-bosh-lite-ready-for-deployment-events, trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-release-version, passed: [create-and-upload-release] }
    - { get: bits-service-release-tarball, passed: [create-and-upload-release] }
    - { get: bits-service-release, passed: [create-and-upload-release], trigger: true }
  - aggregate:
    - task: Generate CF deployment manifest with bits-service enabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params:
        ENVIRONMENT_NAME: cc-updater
        BLOBSTORE_TYPE: webdav
        IAAS: bosh-lite
        OPERATIONS: >
          -o cf-deployment/operations/use-compiled-releases.yml
          -o cf-deployment/operations/scale-to-one-az.yml
          -o ci-tasks/operations/bits-service-scale-to-one-az.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - task:  Make deployment
      file: ci-tasks/tasks/bosh-deploy.yml
      attempts: 2
      input_mapping:
        stemcells: stemcell
        vars-store: git-deployment-vars
      params:
        HOSTS_ENTRY_FILE: environments/softlayer/director/cc-updater-bosh-lite/hosts
        DEPLOYMENT_NAME: cf
        VARS_STORE_FILE: environments/softlayer/director/cc-updater-bosh-lite/vars.yml
  - task: Run CC Updater tests
    file: ci-tasks/tasks/run-cc-updater-tests.yml
    input_mapping:
      ci: ci-tasks
      vars-store: git-deployment-vars
    params: { ENVIRONMENT_NAME: cc-updater-bosh-lite }

- name: migration-bosh1 (S3)
  build_logs_to_retain: 100
  serial: true
  serial_groups: [cf-bosh1-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: bits-service-release-tarball, passed: [create-and-upload-release], trigger: true }
    - { get: bits-service-release-version, passed: [create-and-upload-release] }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-master, trigger: true }
    - { get: migration-s3-bosh-lite-ready-for-deployment-events, trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-release, passed: [create-and-upload-release], trigger: true }
    - { get: bits-service-migration-tests, trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service disabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params: &bosh-interpolate-boshlite1-bits-service-disabled
        ENVIRONMENT_NAME: migration-s3
        BLOBSTORE_TYPE: s3
        IAAS: bosh-lite
        OPERATIONS: >
          -o cf-deployment/operations/use-compiled-releases.yml
          -o cf-deployment/operations/scale-to-one-az.yml
          -o cf-deployment/operations/use-external-blobstore.yml
          -o cf-deployment/operations/use-s3-blobstore.yml
          -o ci-tasks/operations/disable-bits-service.yml
          -o ci-tasks/operations/bits-service-scale-to-one-az.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
        VARIABLES: >
          -v aws_region="((cf-migration-s3-blobstore-region))"
          -v blobstore_access_key_id="((cf-migration-s3-blobstore-access-key-id))"
          -v blobstore_secret_access_key="((cf-migration-s3-blobstore-secret-access-key))"
          -v resource_directory_key="((cf-migration-s3-blobstore-bucket-name))"
          -v buildpack_directory_key="((cf-migration-s3-blobstore-bucket-name))"
          -v droplet_directory_key="((cf-migration-s3-blobstore-bucket-name))"
          -v app_package_directory_key="((cf-migration-s3-blobstore-bucket-name))"
    - &merge-release-tarballs
      task: Merge release tarballs
      file: ci-tasks/tasks/merge-resources.yml
      input_mapping: { a: capi-release-tarball, b: bits-service-release-tarball }
      output_mapping: { merged: releases }
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - &make-migration-s3-deployment
      task:  Make deployment
      file: ci-tasks/tasks/bosh-deploy.yml
      attempts: 2
      input_mapping:
        stemcells: stemcell
        vars-store: git-deployment-vars
      params: &params-
        HOSTS_ENTRY_FILE: environments/softlayer/director/migration-s3-bosh-lite/hosts
        DEPLOYMENT_NAME: cf
        VARS_STORE_FILE: environments/softlayer/director/migration-s3-bosh-lite/vars.yml
  - task: Run migration preparation tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: &migration-tests-input-mappings
      deployment-vars: git-deployment-vars
    params: &boshlite1-bsmt-preparation-params
      test_suite: preparation
      ENVIRONMENT_NAME: migration-s3
      BSMT_PERSISTENT_ORG: BSMT-persistent-org
      BSMT_PERSISTENT_SPACE: BSMT-persistent-space
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-master
      deployment-vars: git-deployment-vars
    params: &bosh-interpolate-boshlite1-bits-service-enabled
      <<: *bosh-interpolate-boshlite1-bits-service-disabled
      OPERATIONS: >
        -o cf-deployment/operations/use-compiled-releases.yml
        -o cf-deployment/operations/scale-to-one-az.yml
        -o cf-deployment/operations/use-external-blobstore.yml
        -o cf-deployment/operations/use-s3-blobstore.yml
        -o ci-tasks/operations/bits-service-scale-to-one-az.yml
        -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
  - aggregate:
    - *make-migration-s3-deployment
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
  - task: Run migration verification tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: &boshlite1-bsmt-verification-params
      <<: *boshlite1-bsmt-preparation-params
      test_suite: verification
  on_failure: *notify

- name: migration-backwards-bosh1
  build_logs_to_retain: 100
  serial: true
  serial_groups: [cf-bosh1-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [migration-bosh1 (S3)], trigger: true }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: bits-service-release-tarball, passed: [migration-bosh1 (S3)], trigger: true}
    - { get: bits-service-release-version, passed: [migration-bosh1 (S3)] }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: cf-deployment-master, passed: [migration-bosh1 (S3)], trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-release, passed: [migration-bosh1 (S3)], trigger: true }
    - { get: bits-service-migration-tests, passed: [migration-bosh1 (S3)], trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service enabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params: *bosh-interpolate-boshlite1-bits-service-enabled
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-s3-deployment
  - task: Run migration preparation tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: *boshlite1-bsmt-preparation-params
  - task: Generate CF deployment manifest with bits-service disabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-master
      deployment-vars: git-deployment-vars
    params: *bosh-interpolate-boshlite1-bits-service-disabled
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-s3-deployment
  - task: Run migration verification tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: *boshlite1-bsmt-verification-params
  on_failure: *notify

- name: migration-bosh2 (webdav)
  build_logs_to_retain: 100
  serial: true
  serial_groups: [cf-bosh2-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [create-capi-release], trigger: true }
    - { get: bits-service-release-tarball, passed: [create-and-upload-release],trigger: true }
    - { get: bits-service-release-version, passed: [create-and-upload-release], }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: ci-tasks, resource: bits-service-ci, trigger: true }
    - { get: cf-deployment-master, trigger: true }
    - { get: migration-webdav-bosh-lite-ready-for-deployment-events, trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-release, passed: [create-and-upload-release], trigger: true }
    - { get: bits-service-migration-tests, trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service disabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params: &bosh-interpolate-boshlite2-bits-service-disabled
        ENVIRONMENT_NAME: migration-webdav
        BLOBSTORE_TYPE: webdav
        IAAS: bosh-lite
        OPERATIONS: >
          -o cf-deployment/operations/use-compiled-releases.yml
          -o 1-click/operations/add-system-domain-dns-alias.yml
          -o cf-deployment/operations/scale-to-one-az.yml
          -o ci-tasks/operations/disable-bits-service.yml
          -o ci-tasks/operations/bits-service-scale-to-one-az.yml
          -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - &make-migration-webdav-deployment
      task:  Make deployment
      file: ci-tasks/tasks/bosh-deploy.yml
      attempts: 2
      input_mapping:
        stemcells: stemcell
        vars-store: git-deployment-vars
      params:
        HOSTS_ENTRY_FILE: environments/softlayer/director/migration-webdav-bosh-lite/hosts
        DEPLOYMENT_NAME: cf
        VARS_STORE_FILE: environments/softlayer/director/migration-webdav-bosh-lite/vars.yml
  - task: Run migration preparation tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: &boshlite2-bsmt-preparation-params
      <<: *boshlite1-bsmt-preparation-params
      ENVIRONMENT_NAME: migration-webdav
  - task: Generate CF deployment manifest with bits-service enabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-master
      deployment-vars: git-deployment-vars
    params: &bosh-interpolate-boshlite2-bits-service-enabled
      <<: *bosh-interpolate-boshlite2-bits-service-disabled
      OPERATIONS: >
        -o cf-deployment/operations/use-compiled-releases.yml
        -o 1-click/operations/add-system-domain-dns-alias.yml
        -o cf-deployment/operations/scale-to-one-az.yml
        -o ci-tasks/operations/bits-service-scale-to-one-az.yml
        -o ci-tasks/operations/use-latest-capi-and-bits-service-release.yml
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-webdav-deployment
  - task: Run migration verification tests
    attempts: 3
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    input_mapping: *migration-tests-input-mappings
    params: &boshlite2-bsmt-verification-params
      <<: *boshlite2-bsmt-preparation-params
      test_suite: verification
  on_failure: *notify

- name: migration-backwards-bosh2
  build_logs_to_retain: 100
  serial: true
  serial_groups: [cf-bosh2-deployment]
  plan:
  - aggregate:
    - { get: capi-release-tarball, passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: stemcell, resource: boshlite-stemcell }
    - { get: bits-service-release-tarball, passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: bits-service-release-version, passed: [migration-bosh2 (webdav)] }
    - { get: ci-tasks, resource: bits-service-ci }
    - { get: cf-deployment-master, passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: git-deployment-vars }
    - { get: bits-service-release, passed: [migration-bosh2 (webdav)], trigger: true }
    - { get: bits-service-migration-tests, passed: [migration-bosh2 (webdav)], trigger: true}
    - { get: 1-click, trigger: true}
  - aggregate:
    - task: Generate CF deployment manifest with bits-service enabled
      file: ci-tasks/tasks/bosh-interpolate.yml
      input_mapping:
        cf-deployment: cf-deployment-master
        deployment-vars: git-deployment-vars
      params: *bosh-interpolate-boshlite2-bits-service-enabled
    - *merge-release-tarballs
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-webdav-deployment
  - task: Run migration preparation tests
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    attempts: 3
    input_mapping: *migration-tests-input-mappings
    params: *boshlite2-bsmt-preparation-params
  - task: Generate CF deployment manifest with bits-service disabled
    file: ci-tasks/tasks/bosh-interpolate.yml
    input_mapping:
      cf-deployment: cf-deployment-master
      deployment-vars: git-deployment-vars
    params: *bosh-interpolate-boshlite2-bits-service-disabled
  - aggregate:
    - put: git-deployment-vars
      params:
        rebase: true
        repository: updated/deployment-vars
    - *make-migration-webdav-deployment
  - task: Run migration verification tests
    file: ci-tasks/tasks/run-bits-service-migration-tests.yml
    attempts: 3
    input_mapping: *migration-tests-input-mappings
    params: *boshlite2-bsmt-verification-params
  on_failure: *notify

# Infrastructure
- name: cleanup-bosh-sl
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - get: ci-tasks
      resource: bits-service-ci
    - get: nightly-timer
      trigger: true
    - get: git-deployment-vars
  - task: cleanup-bosh
    file: ci-tasks/tasks/bosh-cleanup.yml
    input_mapping: { vars-store: git-deployment-vars }
    params:
      HOSTS_ENTRY_FILE: environments/softlayer/green-hosts
      DEPLOYMENT_NAME: cf
      VARS_STORE_FILE: environments/softlayer/director/green-vars.yml
- name: cleanup-bosh-aws
  build_logs_to_retain: 100
  serial: true
  plan:
  - aggregate:
    - get: ci-tasks
      resource: bits-service-ci
    - get: nightly-timer
      trigger: true
    - get: git-deployment-vars
  - task: cleanup-bosh
    file: ci-tasks/tasks/bosh-cleanup.yml
    input_mapping:
      vars-store: git-deployment-vars
    params: *aws-bosh-params-new

- name: Sync cf-deployment fork (develop)
  plan:
    - aggregate:
      - get: cf-deployment-develop
      - get: cf-deployment-develop-upstream
        trigger: true
      - get: ci-tasks
        resource: bits-service-ci
    - task: sync
      file: ci-tasks/tasks/sync-repo.yml
      input_mapping:
        fork-repo: cf-deployment-develop
        upstream-repo: cf-deployment-develop-upstream
      params: { BRANCH: develop }
    - put: cf-deployment-develop
      params: { repository: synced-repo, force: true }

- name: Sync cf-deployment fork (master)
  plan:
    - aggregate:
      - get: cf-deployment-master
      - get: cf-deployment-master-upstream
        trigger: true
      - get: ci-tasks
        resource: bits-service-ci
    - task: sync
      file: ci-tasks/tasks/sync-repo.yml
      input_mapping:
        fork-repo: cf-deployment-master
        upstream-repo: cf-deployment-master-upstream
      params: { BRANCH: master }
    - put: cf-deployment-master
      params: { repository: synced-repo, force: true }

- name: Sync capi-release fork
  plan:
    - aggregate:
      - get: capi-release
      - get: capi-release-upstream
        trigger: true
      - get: ci-tasks
        resource: bits-service-ci
    - task: sync
      file: ci-tasks/tasks/sync-repo.yml
      input_mapping:
        fork-repo: capi-release
        upstream-repo: capi-release-upstream
      params: { BRANCH: master }
    - put: capi-release
      params: { repository: synced-repo, force: true }

groups:
- name: all
  jobs:
  - run-bits-service-client-tests
  - run-bitsgo-unit-tests
  - Publish gem
  - create-and-upload-release
  - run-system-tests-S3
  - run-system-tests-LOCAL
  - run-system-tests-WEBDAV
  - create-capi-release
  - deploy-and-test-cf-diego-aws
  - enable-BITS-SERVICE-diego-and-run-CATs
  - Deploy CF and run CC Updater tests
  - migration-bosh1 (S3)
  - migration-bosh2 (webdav)
  - migration-backwards-bosh1
  - migration-backwards-bosh2
  - bump-bits-service-release-bitsgo
  - Testing done
  - Publish Dev Release
  - Publish Final Release
  - Sync cf-deployment fork (develop)
  - Sync cf-deployment fork (master)
  - Sync capi-release fork
  - run-bitsgo-contract-integration-test-azure
  - run-bitsgo-contract-integration-test-cos
  - run-bitsgo-contract-integration-test-google-gcp
  - run-bitsgo-contract-integration-test-google-s3
  - run-bitsgo-contract-integration-test-openstack
  - run-bitsgo-contract-integration-test-s3
  - run-bitsgo-contract-integration-test-alibaba
- name: release
  jobs:
  - bump-bits-service-release-bitsgo
  - create-and-upload-release
  - run-bitsgo-contract-integration-test-azure
  - run-bitsgo-contract-integration-test-cos
  - run-bitsgo-contract-integration-test-google-gcp
  - run-bitsgo-contract-integration-test-google-s3
  - run-bitsgo-contract-integration-test-openstack
  - run-bitsgo-contract-integration-test-s3
  - run-bitsgo-contract-integration-test-alibaba
  - run-bitsgo-unit-tests
- name: bits-service-client
  jobs:
  - run-bits-service-client-tests
  - Publish gem
- name: capi-release
  jobs:
  - create-capi-release
  - Publish gem
  - run-bits-service-client-tests
- name: migration
  jobs:
  - migration-backwards-bosh1
  - migration-bosh1 (S3)
  - migration-backwards-bosh2
  - migration-bosh2 (webdav)
- name: infrastructure
  jobs:
  - cleanup-bosh-aws
  - cleanup-bosh-sl
  - manually-delete-cf-diego-aws

resource_types:
- name: bosh2-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook))

- name: aws-stemcell
  type: bosh-io-stemcell
  source: { name: bosh-aws-xen-hvm-ubuntu-xenial-go_agent }

- name: boshlite-stemcell
  type: bosh-io-stemcell
  source: { name: bosh-warden-boshlite-ubuntu-xenial-go_agent }

- name: bits-service-release-tarball
  type: s3
  source: &s3-resource
    access_key_id: ((s3-blobstore-access-key-id))
    secret_access_key: ((s3-blobstore-secret-access-key))
    bucket: ci-bits-service-artifacts
    region_name: eu-west-1
    regexp: bits-service-release/bits-service-(.*).tgz
    private: false

- name: capi-release-tarball
  type: s3
  source:
    <<: *s3-resource
    regexp: capi-release/capi-(.*).tgz

- name: cf-deployment-develop
  type: git
  source:
    uri: git@github.com:petergtz/cf-deployment.git
    branch: develop
    private_key: ((github-private-key))

- name: cf-deployment-develop-upstream
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: develop

- name: cf-deployment-master
  type: git
  source:
    uri: git@github.com:petergtz/cf-deployment.git
    branch: master
    private_key: ((github-private-key))

- name: cf-deployment-master-upstream
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment.git
    branch: master

- name: git-deployment-vars
  type: git
  source:
    uri: git@github.com:cloudfoundry/bits-service-private-config.git
    branch: master
    private_key: ((github-private-key))
    disable_ci_skip: true

- name: bits-service
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/bits-service.git
    private_key: ((github-private-key))

- name: bits-service-client
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-client.git
    branch: master
    private_key: ((github-private-key))

- name: bits-service-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-release.git
    branch: master
    private_key: ((github-private-key))

- name: bits-service-migration-tests
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/bits-service-migration-tests.git
    branch: master
    private_key: ((github-private-key))

- name: bits-service-github-final-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bits-service-release
    access_token: ((github-access-token))
    release: true
    drafts: true
  check_every: 10m

- name: capi-release-upstream
  type: git
  source:
    uri: https://github.com/cloudfoundry/capi-release.git
    branch: master

- name: capi-release
  type: git
  source:
    uri: git@github.com:petergtz/capi-release.git
    branch: master
    private_key: ((github-private-key))

- name: cf-acceptance-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git
    branch: master

- name: cf-smoke-tests
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-smoke-tests.git

- name: nightly-timer
  type: time
  source:
    interval: 24h

- name: daily-morning-timer
  type: time
  source:
    interval: 24h
    start: 4:00 AM
    stop: 5:00 AM
    location: Europe/Berlin

- name: capi-release-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: metadata
    file: version/capi-release/version
    private_key: ((github-private-key))
    initial_version: 1.41.0-dev.1

- name: bits-service-release-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: metadata
    file: version/bits-service-release/version
    private_key: ((github-private-key))
    initial_version: 2.0.0-dev.1

- name: cf-diego-aws-deployment-events
  type: semver
  source: &deployment-events-source
    driver: git
    uri: git@github.com:cloudfoundry-incubator/bits-service-ci.git
    branch: events
    file: events/cf-diego-aws/deployment-deleted
    private_key: ((github-private-key))

- name: cc-updater-bosh-lite-ready-for-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events-bosh-lites-cc-updater-bosh-lite-ready
    uri: git@github.com:cloudfoundry/bits-service-private-config.git

- name: migration-s3-bosh-lite-ready-for-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events-bosh-lites-migration-s3-bosh-lite-ready
    uri: git@github.com:cloudfoundry/bits-service-private-config.git

- name: migration-webdav-bosh-lite-ready-for-deployment-events
  type: semver
  source:
    <<: *deployment-events-source
    file: events-bosh-lites-migration-webdav-bosh-lite-ready
    uri: git@github.com:cloudfoundry/bits-service-private-config.git

- name: bits-service-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bits-service-release
    access_token: ((github-access-token))
    release: false
    pre_release: true
  check_every: 10m

- name: run-after-midnight
  type: time
  source:
    start: 12:00 AM
    stop: 1:00 AM
    location: Europe/Berlin

- name: bits-docker-release
  type: docker-image
  source:
    email: ((dockerhub-email))
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: ((dockerhub-username))/bits-service

- name: eirinifs-downloader-docker-release
  type: docker-image
  source:
    email: ((dockerhub-email))
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    repository: ((dockerhub-username))/eirinifs-downloader
